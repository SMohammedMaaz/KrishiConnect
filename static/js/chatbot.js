/**
 * AgroLink AI Assistant
 * Intelligent chatbot to help farmers and buyers navigate the platform
 */
class AgroLinkChatbot {
    constructor() {
        this.container = null;
        this.button = null;
        this.chat = null;
        this.messages = null;
        this.input = null;
        this.sendButton = null;
        this.voiceButton = null;
        this.languageSelect = null;
        this.isOpen = false;
        this.currentLanguage = 'en';
        this.isListening = false;
        this.recognition = null;
        this.suggestedReplies = [
            'How do I sell my crops?',
            'How to verify my account?',
            'Market prices today',
            'Weather forecast',
            'Connect with buyers',
            'Get crop suggestions'
        ];
        
        // Translations for multilingual support
        this.translations = {
            en: {
                title: 'KrishiBot',
                welcome: 'Hello! ЁЯСЛ I\'m KrishiBot, your farming assistant. How can I help you today?',
                inputPlaceholder: 'Type your message here...',
                send: 'Send',
                voice: 'Voice',
                close: 'Close',
                suggestions: 'You can ask me about:',
                typingIndicator: 'KrishiBot is typing...'
            },
            hi: {
                title: 'рдХреГрд╖рд┐рдмреЙрдЯ',
                welcome: 'рдирдорд╕реНрддреЗ! ЁЯСЛ рдореИрдВ рдХреГрд╖рд┐рдмреЙрдЯ рд╣реВрдБ, рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?',
                inputPlaceholder: 'рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдпрд╣рд╛рдВ рд▓рд┐рдЦреЗрдВ...',
                send: 'рднреЗрдЬреЗрдВ',
                voice: 'рдЖрд╡рд╛рдЬрд╝',
                close: 'рдмрдВрдж рдХрд░реЗрдВ',
                suggestions: 'рдЖрдк рдореБрдЭрд╕реЗ рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:',
                typingIndicator: 'рдХреГрд╖рд┐рдмреЙрдЯ рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ...'
            },
            ta: {
                title: 'роХро┐ро░рпБро╖ро┐рокро╛роЯрпН',
                welcome: 'ро╡рогроХрпНроХроорпН! ЁЯСЛ роиро╛ройрпН роХро┐ро░рпБро╖ро┐рокро╛роЯрпН, роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?',
                inputPlaceholder: 'роЙроЩрпНроХро│рпН роЪрпЖропрпНродро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН...',
                send: 'роЕройрпБрокрпНрокрпБроХ',
                voice: 'роХрпБро░ро▓рпН',
                close: 'роорпВроЯрпБ',
                suggestions: 'роирпАроЩрпНроХро│рпН роОройрпНройро┐роЯроорпН роХрпЗроЯрпНроХро▓ро╛роорпН:',
                typingIndicator: 'роХро┐ро░рпБро╖ро┐рокро╛роЯрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНроХро┐ро▒родрпБ...'
            }
        };
        
        // Quick replies translations
        this.quickRepliesTranslations = {
            en: [
                'How do I sell my crops?',
                'How to verify my account?',
                'Market prices today',
                'Weather forecast',
                'Connect with buyers',
                'Get crop suggestions'
            ],
            hi: [
                'рдореИрдВ рдЕрдкрдиреА рдлрд╕рд▓ рдХреИрд╕реЗ рдмреЗрдЪреВрдВ?',
                'рдЕрдкрдирд╛ рдЦрд╛рддрд╛ рдХреИрд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ?',
                'рдЖрдЬ рдХреЗ рдмрд╛рдЬрд╛рд░ рднрд╛рд╡',
                'рдореМрд╕рдо рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
                'рдЦрд░реАрджрд╛рд░реЛрдВ рд╕реЗ рдЬреБрдбрд╝реЗрдВ',
                'рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ'
            ],
            ta: [
                'роОройродрпБ рокропро┐ро░рпНроХро│рпИ роОрокрпНрокроЯро┐ ро╡ро┐ро▒рпНрокродрпБ?',
                'роОройродрпБ роХрогроХрпНроХрпИ роОрокрпНрокроЯро┐ роЪро░ро┐рокро╛ро░рпНрокрпНрокродрпБ?',
                'роЗройрпНро▒рпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН',
                'ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
                'ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпБроЯройрпН роЗрогрпИроХ',
                'рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпИрокрпН рокрпЖро▒рпБроХ'
            ]
        };
        
        // Predefined responses
        this.responses = {
            en: {
                'sell_crops': `To sell your crops on KrishiConnect:
                    1. Log in to your farmer account
                    2. Click on "Add New Product" on your dashboard
                    3. Fill in details like crop type, quantity, price, etc.
                    4. Upload clear photos of your produce
                    5. Submit your listing
                    
                    Your listing will be visible to buyers in your area!`,
                    
                'verify_account': `To verify your account:
                    
                    For Farmers:
                    1. Complete your profile with accurate details
                    2. Enter your Aadhar number
                    3. Complete the verification process via OTP
                    4. Our team will verify your details within 24-48 hours
                    
                    For Buyers:
                    1. Complete your profile with accurate details
                    2. Upload any business registration documents if applicable
                    3. Verification usually takes 24-48 hours`,
                    
                'market_prices': `Current market prices (тВ╣ per quintal):
                    
                    Rice: тВ╣2,240 (тЖС 2.5%)
                    Wheat: тВ╣2,100 (тЖУ 1.2%)
                    Maize: тВ╣1,850 (тЖС 0.8%)
                    Soybeans: тВ╣3,600 (тЖС 3.2%)
                    Cotton: тВ╣6,500 (тЖУ 0.5%)
                    
                    These prices are updated daily. For more detailed information, check the Market Prices section on the dashboard.`,
                    
                'weather': `Today's weather forecast for your region:
                    
                    Temperature: 32┬░C
                    Humidity: 45%
                    Wind: 12 km/h
                    
                    Agricultural Advisory:
                    Good conditions for wheat harvest. Complete harvesting within 2-3 days to avoid potential rain.
                    
                    For more detailed weather information and advisories, check the Weather section on the dashboard.`,
                    
                'connect_buyers': `To connect with buyers:
                    
                    1. Ensure your products are listed with accurate details
                    2. Check the "Inquiries" section on your dashboard for buyer messages
                    3. Respond promptly to inquiries
                    4. You can also view nearby buyers in the "Nearby Buyers" section
                    5. Use the chat feature to communicate directly
                    
                    Pro tip: Listings with clear photos and detailed descriptions get more buyer interest!`,
                    
                'crop_suggestions': `Based on current market trends and your location, here are some crop suggestions:
                    
                    1. Soybeans - High demand and good price trend
                    2. Pulses (especially Moong and Urad) - Limited supply in markets
                    3. Vegetables (Tomatoes, Onions) - Good off-season prices
                    
                    For personalized crop suggestions based on your specific location, soil type, and other factors, please go to the "Crop Advisory" section in your dashboard.`,
                    
                'default': `I'm not sure I understand. Could you please rephrase your question or choose from one of these topics?`
            },
            // Hindi responses
            hi: {
                'sell_crops': `рдХреГрд╖рд┐рдХрдиреЗрдХреНрдЯ рдкрд░ рдЕрдкрдиреА рдлрд╕рд▓ рдмреЗрдЪрдиреЗ рдХреЗ рд▓рд┐рдП:
                    1. рдЕрдкрдиреЗ рдХрд┐рд╕рд╛рди рдЦрд╛рддреЗ рдореЗрдВ рд▓реЙрдЧ рдЗрди рдХрд░реЗрдВ
                    2. рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ "рдирдпрд╛ рдЙрддреНрдкрд╛рдж рдЬреЛрдбрд╝реЗрдВ" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ
                    3. рдлрд╕рд▓ рдкреНрд░рдХрд╛рд░, рдорд╛рддреНрд░рд╛, рдореВрд▓реНрдп рдЖрджрд┐ рдЬреИрд╕реЗ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ
                    4. рдЕрдкрдиреА рдЙрдкрдЬ рдХреА рд╕реНрдкрд╖реНрдЯ рддрд╕реНрд╡реАрд░реЗрдВ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ
                    5. рдЕрдкрдиреА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ
                    
                    рдЖрдкрдХреА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдЦрд░реАрджрд╛рд░реЛрдВ рдХреЛ рджрд┐рдЦрд╛рдИ рджреЗрдЧреА!`,
                    
                'verify_account': `рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдХреЛ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:
                    
                    рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП:
                    1. рд╕рдЯреАрдХ рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде рдЕрдкрдирд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдкреВрд░рд╛ рдХрд░реЗрдВ
                    2. рдЕрдкрдирд╛ рдЖрдзрд╛рд░ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ
                    3. OTP рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рд╕рддреНрдпрд╛рдкрди рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдкреВрд░реА рдХрд░реЗрдВ
                    4. рд╣рдорд╛рд░реА рдЯреАрдо 24-48 рдШрдВрдЯреЛрдВ рдХреЗ рднреАрддрд░ рдЖрдкрдХреЗ рд╡рд┐рд╡рд░рдгреЛрдВ рдХрд╛ рд╕рддреНрдпрд╛рдкрди рдХрд░реЗрдЧреА
                    
                    рдЦрд░реАрджрд╛рд░реЛрдВ рдХреЗ рд▓рд┐рдП:
                    1. рд╕рдЯреАрдХ рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде рдЕрдкрдирд╛ рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдкреВрд░рд╛ рдХрд░реЗрдВ
                    2. рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ рддреЛ рдХреЛрдИ рднреА рд╡реНрдпрд╛рдкрд╛рд░ рдкрдВрдЬреАрдХрд░рдг рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ
                    3. рд╕рддреНрдпрд╛рдкрди рдЖрдорддреМрд░ рдкрд░ 24-48 рдШрдВрдЯреЗ рд▓реЗрддрд╛ рд╣реИ`,
                    
                'market_prices': `рд╡рд░реНрддрдорд╛рди рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп (тВ╣ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓):
                    
                    рдЪрд╛рд╡рд▓: тВ╣2,240 (тЖС 2.5%)
                    рдЧреЗрд╣реВрдВ: тВ╣2,100 (тЖУ 1.2%)
                    рдордХреНрдХрд╛: тВ╣1,850 (тЖС 0.8%)
                    рд╕реЛрдпрд╛рдмреАрди: тВ╣3,600 (тЖС 3.2%)
                    рдХрдкрд╛рд╕: тВ╣6,500 (тЖУ 0.5%)
                    
                    рдпреЗ рдХреАрдорддреЗрдВ рд░реЛрдЬрд╛рдирд╛ рдЕрдкрдбреЗрдЯ рдХреА рдЬрд╛рддреА рд╣реИрдВред рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП, рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдорд╛рд░реНрдХреЗрдЯ рдкреНрд░рд╛рдЗрдЬрд╝ рд╕реЗрдХреНрд╢рди рджреЗрдЦреЗрдВред`,
                    
                'weather': `рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:
                    
                    рддрд╛рдкрдорд╛рди: 32┬░C
                    рдЖрд░реНрджреНрд░рддрд╛: 45%
                    рд╣рд╡рд╛: 12 рдХрд┐рдореА/рдШрдВрдЯрд╛
                    
                    рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣:
                    рдЧреЗрд╣реВрдВ рдХреА рдХрдЯрд╛рдИ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫреА рд╕реНрдерд┐рддрд┐ред рд╕рдВрднрд╛рд╡рд┐рдд рдмрд╛рд░рд┐рд╢ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП 2-3 рджрд┐рдиреЛрдВ рдХреЗ рднреАрддрд░ рдХрдЯрд╛рдИ рдкреВрд░реА рдХрд░реЗрдВред
                    
                    рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА рдФрд░ рд╕рд▓рд╛рд╣ рдХреЗ рд▓рд┐рдП, рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдореМрд╕рдо рдЕрдиреБрднрд╛рдЧ рджреЗрдЦреЗрдВред`,
                    
                'connect_buyers': `рдЦрд░реАрджрд╛рд░реЛрдВ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП:
                    
                    1. рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХреЗ рдЙрддреНрдкрд╛рдж рд╕рдЯреАрдХ рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде рд╕реВрдЪреАрдмрджреНрдз рд╣реИрдВ
                    2. рдЦрд░реАрджрд╛рд░ рд╕рдВрджреЗрд╢реЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ "рдкреВрдЫрддрд╛рдЫ" рдЕрдиреБрднрд╛рдЧ рджреЗрдЦреЗрдВ
                    3. рдкреВрдЫрддрд╛рдЫ рдХрд╛ рддреБрд░рдВрдд рдЬрд╡рд╛рдм рджреЗрдВ
                    4. рдЖрдк "рдирд┐рдХрдЯрд╡рд░реНрддреА рдЦрд░реАрджрд╛рд░" рдЕрдиреБрднрд╛рдЧ рдореЗрдВ рдкрд╛рд╕ рдХреЗ рдЦрд░реАрджрд╛рд░реЛрдВ рдХреЛ рднреА рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ
                    5. рд╕реАрдзреЗ рд╕рдВрд╡рд╛рдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЪреИрдЯ рд╕реБрд╡рд┐рдзрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
                    
                    рдкреНрд░реЛ рдЯрд┐рдк: рд╕реНрдкрд╖реНрдЯ рдлреЛрдЯреЛ рдФрд░ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╡рд░рдг рд╡рд╛рд▓реА рд▓рд┐рд╕реНрдЯрд┐рдВрдЧ рдХреЛ рдЕрдзрд┐рдХ рдЦрд░реАрджрд╛рд░ рдХрд╛ рд░реБрдЪрд┐ рдорд┐рд▓рддрд╛ рд╣реИ!`,
                    
                'crop_suggestions': `рд╡рд░реНрддрдорд╛рди рдмрд╛рдЬрд╛рд░ рд░реБрдЭрд╛рдиреЛрдВ рдФрд░ рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдпрд╣рд╛рдВ рдХреБрдЫ рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ рд╣реИрдВ:
                    
                    1. рд╕реЛрдпрд╛рдмреАрди - рдЙрдЪреНрдЪ рдорд╛рдВрдЧ рдФрд░ рдЕрдЪреНрдЫрд╛ рдореВрд▓реНрдп рд░реБрдЭрд╛рди
                    2. рджрд╛рд▓реЗрдВ (рд╡рд┐рд╢реЗрд╖рдХрд░ рдореВрдВрдЧ рдФрд░ рдЙрдбрд╝рдж) - рдмрд╛рдЬрд╛рд░реЛрдВ рдореЗрдВ рд╕реАрдорд┐рдд рдЖрдкреВрд░реНрддрд┐
                    3. рд╕рдмреНрдЬрд┐рдпрд╛рдВ (рдЯрдорд╛рдЯрд░, рдкреНрдпрд╛рдЬ) - рдЕрдЪреНрдЫреЗ рдСрдл-рд╕реАрдЬрди рдореВрд▓реНрдп
                    
                    рдЖрдкрдХреЗ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕реНрдерд╛рди, рдорд┐рдЯреНрдЯреА рдХреЗ рдкреНрд░рдХрд╛рд░, рдФрд░ рдЕрдиреНрдп рдХрд╛рд░рдХреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡реЛрдВ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдореЗрдВ "рдлрд╕рд▓ рд╕рд▓рд╛рд╣" рдЕрдиреБрднрд╛рдЧ рдкрд░ рдЬрд╛рдПрдВред`,
                    
                'default': `рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рджреЛрдмрд╛рд░рд╛ рдлрд┐рд░ рд╕реЗ рдкреВрдЫреЗрдВ рдпрд╛ рдЗрдирдореЗрдВ рд╕реЗ рдХрд┐рд╕реА рдПрдХ рд╡рд┐рд╖рдп рдХрд╛ рдЪрдпрди рдХрд░реЗрдВ?`
            },
            // Tamil responses
            ta: {
                'sell_crops': `роХро┐ро░рпБро╖ро┐роХройрпЖроХрпНроЯрпНроЯро┐ро▓рпН роЙроЩрпНроХро│рпН рокропро┐ро░рпНроХро│рпИ ро╡ро┐ро▒рпНрокродрпБ роОрокрпНрокроЯро┐:
                    1. роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропро┐ роХрогроХрпНроХро┐ро▓рпН роЙро│рпНроирпБро┤рпИропро╡рпБроорпН
                    2. роЙроЩрпНроХро│рпН роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН "рокрпБродро┐роп родропро╛ро░ро┐рокрпНрокрпБ роЪрпЗро░рпН" роОройрпНрокродрпИроХрпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро╡рпБроорпН
                    3. рокропро┐ро░рпН ро╡роХрпИ, роЕро│ро╡рпБ, ро╡ро┐ро▓рпИ рокрпЛройрпНро▒ ро╡ро┐ро╡ро░роЩрпНроХро│рпИ роиро┐ро░рокрпНрокро╡рпБроорпН
                    4. роЙроЩрпНроХро│рпН ро╡ро┐ро│рпИрокрпКро░рпБроЯрпНроХро│ро┐ройрпН родрпЖро│ро┐ро╡ро╛рой рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН
                    5. роЙроЩрпНроХро│рпН рокроЯрпНроЯро┐ропро▓рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН
                    
                    роЙроЩрпНроХро│рпН рокроЯрпНроЯро┐ропро▓рпН роЙроЩрпНроХро│рпН рокроХрпБродро┐ропро┐ро▓рпН роЙро│рпНро│ ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрпБроорпН!`,
                    
                'verify_account': `роЙроЩрпНроХро│рпН роХрогроХрпНроХрпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХ:
                    
                    ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХрпБ:
                    1. родрпБро▓рпНро▓ро┐ропрооро╛рой ро╡ро┐ро╡ро░роЩрпНроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
                    2. роЙроЩрпНроХро│рпН роЖродро╛ро░рпН роОрогрпНрогрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН
                    3. OTP роорпВро▓роорпН роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБроЪрпН роЪрпЖропро▓рпНроорпБро▒рпИропрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
                    4. роОроЩрпНроХро│рпН роХрпБро┤рпБ 24-48 роорогро┐роирпЗро░родрпНродро┐ро▒рпНроХрпБро│рпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХрпБроорпН
                    
                    ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпБроХрпНроХрпБ:
                    1. родрпБро▓рпНро▓ро┐ропрооро╛рой ро╡ро┐ро╡ро░роЩрпНроХро│рпБроЯройрпН роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН
                    2. рокрпКро░рпБроирпНродроХрпНроХрпВроЯро┐роп ро╡рогро┐роХрокрпН рокродро┐ро╡рпБ роЖро╡рогроЩрпНроХро│рпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН
                    3. роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ рокрпКродрпБро╡ро╛роХ 24-48 роорогро┐роирпЗро░роорпН роОроЯрпБроХрпНроХрпБроорпН`,
                    
                'market_prices': `родро▒рпНрокрпЛродрпИроп роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН (тВ╣ роХрпБро╡ро┐рогрпНроЯро╛ро▓рпН):
                    
                    роЕро░ро┐роЪро┐: тВ╣2,240 (тЖС 2.5%)
                    роХрпЛродрпБроорпИ: тВ╣2,100 (тЖУ 1.2%)
                    роЪрпЛро│роорпН: тВ╣1,850 (тЖС 0.8%)
                    роЪрпЛропро╛рокрпАройрпНро╕рпН: тВ╣3,600 (тЖС 3.2%)
                    рокро░рпБродрпНродро┐: тВ╣6,500 (тЖУ 0.5%)
                    
                    роЗроирпНрод ро╡ро┐ро▓рпИроХро│рпН родро┐ройроорпБроорпН рокрпБродрпБрокрпНрокро┐роХрпНроХрокрпНрокроЯрпБроХро┐ройрпНро▒рой. роорпЗро▓рпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой родроХро╡ро▓рпБроХрпНроХрпБ, роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН рокро┐ро░ро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН.`,
                    
                'weather': `роЙроЩрпНроХро│рпН рокроХрпБродро┐роХрпНроХро╛рой роЗройрпНро▒рпИроп ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ:
                    
                    ро╡рпЖрокрпНрокроиро┐ро▓рпИ: 32┬░C
                    роИро░рокрпНрокродроорпН: 45%
                    роХро╛ро▒рпНро▒рпБ: 12 роХро┐роорпА/роорогро┐
                    
                    ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИ:
                    роХрпЛродрпБроорпИ роЕро▒рпБро╡роЯрпИроХрпНроХрпБ роиро▓рпНро▓ роиро┐ро▓рпИроорпИроХро│рпН. роЪро╛родрпНродро┐ропрооро╛рой рооро┤рпИропрпИродрпН родро╡ро┐ро░рпНроХрпНроХ 2-3 роиро╛роЯрпНроХро│рпБроХрпНроХрпБро│рпН роЕро▒рпБро╡роЯрпИропрпИ роорпБроЯро┐роХрпНроХро╡рпБроорпН.
                    
                    роорпЗро▓рпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро╛ройро┐ро▓рпИ родроХро╡ро▓рпН рооро▒рпНро▒рпБроорпН роЖро▓рпЛроЪройрпИроХро│рпБроХрпНроХрпБ, роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН ро╡ро╛ройро┐ро▓рпИ рокро┐ро░ро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН.`,
                    
                'connect_buyers': `ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпБроЯройрпН роЗрогрпИро╡родрпБ роОрокрпНрокроЯро┐:
                    
                    1. роЙроЩрпНроХро│рпН родропро╛ро░ро┐рокрпНрокрпБроХро│рпН родрпБро▓рпНро▓ро┐ропрооро╛рой ро╡ро┐ро╡ро░роЩрпНроХро│рпБроЯройрпН рокроЯрпНроЯро┐ропро▓ро┐роЯрокрпНрокроЯрпНроЯрпБро│рпНро│родрпИ роЙро▒рпБродро┐роЪрпЖропрпНропро╡рпБроорпН
                    2. ро╡ро╛роЩрпНроХрпБрокро╡ро░рпН роЪрпЖропрпНродро┐роХро│рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН "ро╡ро┐роЪро╛ро░рогрпИроХро│рпН" рокро┐ро░ро┐ро╡рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН
                    3. ро╡ро┐роЪро╛ро░рогрпИроХро│рпБроХрпНроХрпБ роЙроЯройроЯро┐ропро╛роХ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН
                    4. "роЕро░рпБроХро┐ро▓рпБро│рпНро│ ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпН" рокро┐ро░ро┐ро╡ро┐ро▓рпН роЕро░рпБроХро┐ро▓рпБро│рпНро│ ро╡ро╛роЩрпНроХрпБрокро╡ро░рпНроХро│рпИропрпБроорпН рокро╛ро░рпНроХрпНроХро▓ро╛роорпН
                    5. роирпЗро░роЯро┐ропро╛роХродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ роЕро░роЯрпНроЯрпИ роЕроорпНроЪродрпНродрпИрокрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН
                    
                    роорпБроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБ: родрпЖро│ро┐ро╡ро╛рой рокрпБроХрпИрокрпНрокроЯроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпБроЯройрпН роХрпВроЯро┐роп рокроЯрпНроЯро┐ропро▓рпНроХро│рпН роЕродро┐роХ ро╡ро╛роЩрпНроХрпБрокро╡ро░рпН роЖро░рпНро╡родрпНродрпИрокрпН рокрпЖро▒рпБроХро┐ройрпНро▒рой!`,
                    
                'crop_suggestions': `родро▒рпНрокрпЛродрпИроп роЪроирпНродрпИ рокрпЛроХрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЙроЩрпНроХро│рпН роЗро░рпБрокрпНрокро┐роЯродрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЗроЩрпНроХрпЗ роЪро┐ро▓ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН роЙро│рпНро│рой:
                    
                    1. роЪрпЛропро╛рокрпАройрпНро╕рпН - роЕродро┐роХ родрпЗро╡рпИ рооро▒рпНро▒рпБроорпН роиро▓рпНро▓ ро╡ро┐ро▓рпИ рокрпЛроХрпНроХрпБ
                    2. рокро░рпБрокрпНрокрпБ ро╡роХрпИроХро│рпН (роХрпБро▒ро┐рокрпНрокро╛роХ рокро╛роЪро┐рокрпНрокропро▒рпБ рооро▒рпНро▒рпБроорпН роЙро│рпБроирпНродрпБ) - роЪроирпНродрпИроХро│ро┐ро▓рпН роХрпБро▒рпИроирпНрод ро╡ро┐роиро┐ропрпЛроХроорпН
                    3. роХро╛ропрпНроХро▒ро┐роХро│рпН (родроХрпНроХро╛ро│ро┐, ро╡рпЖроЩрпНроХро╛ропроорпН) - роиро▓рпНро▓ роЖроГрокрпН-роЪрпАроЪройрпН ро╡ро┐ро▓рпИроХро│рпН
                    
                    роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЗро░рпБрокрпНрокро┐роЯроорпН, роорогрпН ро╡роХрпИ рооро▒рпНро▒рпБроорпН рокро┐ро▒ роХро╛ро░рогро┐роХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпБроХрпНроХрпБ, роЙроЩрпНроХро│рпН роЯро╛ро╖рпНрокрпЛро░рпНроЯро┐ро▓рпН "рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ" рокро┐ро░ро┐ро╡рпБроХрпНроХрпБроЪрпН роЪрпЖро▓рпНро▓ро╡рпБроорпН.`,
                    
                'default': `роОройроХрпНроХрпБ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ рооро▒рпБрокроЯро┐ропрпБроорпН роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ роЗроирпНрод родро▓рпИрокрпНрокрпБроХро│ро┐ро▓рпН роТройрпНро▒рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроЩрпНроХро│рпН?`
            }
        };
    }
    
    /**
     * Initialize the chatbot UI and functionality
     */
    init() {
        this._createChatbotUI();
        this._attachEventListeners();
        setTimeout(() => {
            this._addBotMessage(this.translations[this.currentLanguage].welcome);
            this._suggestQuickReplies(this.quickRepliesTranslations[this.currentLanguage]);
        }, 1000);
    }
    
    /**
     * Create the chatbot UI elements
     */
    _createChatbotUI() {
        // Create container
        this.container = document.createElement('div');
        this.container.className = 'krishibot-container';
        
        // Create chat button
        this.button = document.createElement('div');
        this.button.className = 'krishibot-button';
        this.button.innerHTML = '<i data-feather="message-circle"></i>';
        
        // Create chat window
        this.chat = document.createElement('div');
        this.chat.className = 'krishibot-chat';
        
        // Create chat header
        const header = document.createElement('div');
        header.className = 'krishibot-header';
        
        // Create title
        const title = document.createElement('div');
        title.className = 'krishibot-title';
        
        const avatar = document.createElement('div');
        avatar.className = 'krishibot-avatar';
        avatar.innerHTML = '<i data-feather="cpu"></i>';
        
        const headerTitle = document.createElement('h4');
        headerTitle.textContent = this.translations[this.currentLanguage].title;
        
        title.appendChild(avatar);
        title.appendChild(headerTitle);
        
        // Create language selector
        const languageDiv = document.createElement('div');
        languageDiv.className = 'krishibot-language';
        
        this.languageSelect = document.createElement('select');
        
        const languages = [
            { code: 'en', name: 'English' },
            { code: 'hi', name: 'рд╣рд┐рдВрджреА' },
            { code: 'ta', name: 'родрооро┐ро┤рпН' }
        ];
        
        languages.forEach(lang => {
            const option = document.createElement('option');
            option.value = lang.code;
            option.textContent = lang.name;
            if (lang.code === this.currentLanguage) {
                option.selected = true;
            }
            this.languageSelect.appendChild(option);
        });
        
        languageDiv.appendChild(this.languageSelect);
        
        // Create close button
        const closeButton = document.createElement('div');
        closeButton.className = 'krishibot-close';
        closeButton.innerHTML = '<i data-feather="x"></i>';
        
        header.appendChild(title);
        header.appendChild(languageDiv);
        header.appendChild(closeButton);
        
        // Create messages container
        this.messages = document.createElement('div');
        this.messages.className = 'krishibot-messages';
        
        // Create input area
        const inputArea = document.createElement('div');
        inputArea.className = 'krishibot-input';
        
        this.voiceButton = document.createElement('div');
        this.voiceButton.className = 'krishibot-voice';
        this.voiceButton.innerHTML = '<i data-feather="mic"></i>';
        
        this.input = document.createElement('input');
        this.input.type = 'text';
        this.input.placeholder = this.translations[this.currentLanguage].inputPlaceholder;
        
        this.sendButton = document.createElement('button');
        this.sendButton.innerHTML = '<i data-feather="send"></i>';
        
        inputArea.appendChild(this.voiceButton);
        inputArea.appendChild(this.input);
        inputArea.appendChild(this.sendButton);
        
        // Assemble chat window
        this.chat.appendChild(header);
        this.chat.appendChild(this.messages);
        this.chat.appendChild(inputArea);
        
        // Add to container
        this.container.appendChild(this.button);
        this.container.appendChild(this.chat);
        
        // Add to document
        const targetContainer = document.getElementById('krishibot-container');
        if (targetContainer) {
            targetContainer.appendChild(this.container);
        } else {
            document.body.appendChild(this.container);
        }
        
        // Initialize Feather icons
        if (typeof feather !== 'undefined') {
            feather.replace();
        }
    }
    
    /**
     * Attach event listeners to chatbot elements
     */
    _attachEventListeners() {
        // Toggle chat on button click
        this.button.addEventListener('click', () => {
            this._toggleChat();
        });
        
        // Close chat on close button click
        const closeButton = this.chat.querySelector('.krishibot-close');
        closeButton.addEventListener('click', () => {
            this._toggleChat();
        });
        
        // Send message on button click
        this.sendButton.addEventListener('click', () => {
            this._handleUserInput();
        });
        
        // Send message on Enter key
        this.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this._handleUserInput();
            }
        });
        
        // Toggle voice input
        this.voiceButton.addEventListener('click', () => {
            this._toggleVoiceInput();
        });
        
        // Language change
        this.languageSelect.addEventListener('change', () => {
            this.currentLanguage = this.languageSelect.value;
            
            // Update UI with selected language
            const headerTitle = this.chat.querySelector('.krishibot-header h4');
            headerTitle.textContent = this.translations[this.currentLanguage].title;
            
            this.input.placeholder = this.translations[this.currentLanguage].inputPlaceholder;
            
            // Add welcome message in new language
            this._addBotMessage(this.translations[this.currentLanguage].welcome);
            
            // Add quick replies in new language
            this._suggestQuickReplies(this.quickRepliesTranslations[this.currentLanguage]);
        });
    }
    
    /**
     * Handle user message input
     */
    _handleUserInput() {
        const message = this.input.value.trim();
        
        if (message) {
            // Add user message to chat
            this._addUserMessage(message);
            
            // Clear input
            this.input.value = '';
            
            // Process user input and generate response
            this._processUserInput(message);
        }
    }
    
    /**
     * Add user message to chat
     */
    _addUserMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'krishibot-message krishibot-user-message';
        messageElement.textContent = message;
        
        const timestamp = document.createElement('div');
        timestamp.className = 'krishibot-timestamp';
        timestamp.textContent = this._getCurrentTime();
        
        messageElement.appendChild(timestamp);
        this.messages.appendChild(messageElement);
        
        this._scrollToBottom();
    }
    
    /**
     * Add bot message to chat
     */
    _addBotMessage(message) {
        // Show typing indicator
        this._showTypingIndicator();
        
        // Add bot message after a delay to simulate typing
        setTimeout(() => {
            // Remove typing indicator
            this._hideTypingIndicator();
            
            const messageElement = document.createElement('div');
            messageElement.className = 'krishibot-message krishibot-bot-message';
            
            // Support for multiline messages (replace \n with <br>)
            messageElement.innerHTML = message.replace(/\n/g, '<br>');
            
            const timestamp = document.createElement('div');
            timestamp.className = 'krishibot-timestamp';
            timestamp.textContent = this._getCurrentTime();
            
            messageElement.appendChild(timestamp);
            this.messages.appendChild(messageElement);
            
            this._scrollToBottom();
        }, 1000 + Math.random() * 1000); // Random delay between 1-2 seconds
    }
    
    /**
     * Show bot typing indicator
     */
    _showTypingIndicator() {
        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'krishibot-typing';
        typingIndicator.id = 'krishibot-typing';
        
        typingIndicator.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;
        
        this.messages.appendChild(typingIndicator);
        this._scrollToBottom();
    }
    
    /**
     * Hide bot typing indicator
     */
    _hideTypingIndicator() {
        const typingIndicator = document.getElementById('krishibot-typing');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    /**
     * Process user input and generate appropriate response
     */
    _processUserInput(message) {
        const lowercaseMessage = message.toLowerCase();
        let responseKey = 'default';
        
        // Simple keyword matching for demo purposes
        // In a real application, this would use NLP or be connected to a backend
        if (lowercaseMessage.includes('sell') || lowercaseMessage.includes('selling') || 
            lowercaseMessage.includes('market') || lowercaseMessage.includes('crop') && lowercaseMessage.includes('sell')) {
            responseKey = 'sell_crops';
        } else if (lowercaseMessage.includes('verify') || lowercaseMessage.includes('account') || 
                   lowercaseMessage.includes('verification') || lowercaseMessage.includes('aadhar')) {
            responseKey = 'verify_account';
        } else if (lowercaseMessage.includes('price') || lowercaseMessage.includes('market') || 
                   lowercaseMessage.includes('rate') || lowercaseMessage.includes('cost')) {
            responseKey = 'market_prices';
        } else if (lowercaseMessage.includes('weather') || lowercaseMessage.includes('rain') || 
                   lowercaseMessage.includes('forecast') || lowercaseMessage.includes('temperature')) {
            responseKey = 'weather';
        } else if (lowercaseMessage.includes('buyer') || lowercaseMessage.includes('connect') || 
                   lowercaseMessage.includes('purchase') || lowercaseMessage.includes('contact')) {
            responseKey = 'connect_buyers';
        } else if (lowercaseMessage.includes('suggestion') || lowercaseMessage.includes('recommend') || 
                   lowercaseMessage.includes('advice') || lowercaseMessage.includes('which crop')) {
            responseKey = 'crop_suggestions';
        }
        
        // Get response based on current language
        const response = this.responses[this.currentLanguage][responseKey];
        
        // Add bot response
        this._addBotMessage(response);
        
        // Add quick replies after response
        setTimeout(() => {
            this._suggestQuickReplies(this.quickRepliesTranslations[this.currentLanguage]);
        }, 2500);
    }
    
    /**
     * Add quick reply suggestions
     */
    _suggestQuickReplies(replies) {
        // Create container for quick replies if it doesn't exist
        let quickRepliesElement = this.messages.querySelector('.krishibot-quick-replies-container');
        
        if (quickRepliesElement) {
            quickRepliesElement.remove();
        }
        
        quickRepliesElement = document.createElement('div');
        quickRepliesElement.className = 'krishibot-message krishibot-bot-message krishibot-quick-replies-container';
        
        const heading = document.createElement('div');
        heading.className = 'quick-replies-heading';
        heading.textContent = this.translations[this.currentLanguage].suggestions;
        
        const quickReplies = document.createElement('div');
        quickReplies.className = 'krishibot-quick-replies';
        
        // Add quick reply buttons
        replies.forEach(reply => {
            const quickReply = document.createElement('div');
            quickReply.className = 'krishibot-quick-reply';
            quickReply.textContent = reply;
            
            quickReply.addEventListener('click', () => {
                this.input.value = reply;
                this._handleUserInput();
            });
            
            quickReplies.appendChild(quickReply);
        });
        
        quickRepliesElement.appendChild(heading);
        quickRepliesElement.appendChild(quickReplies);
        this.messages.appendChild(quickRepliesElement);
        
        this._scrollToBottom();
    }
    
    /**
     * Open the chat
     */
    _openChat() {
        this.chat.style.display = 'flex';
        this.isOpen = true;
        setTimeout(() => {
            this.input.focus();
        }, 300);
    }
    
    /**
     * Toggle chat open/closed
     */
    _toggleChat() {
        if (this.isOpen) {
            this.chat.style.display = 'none';
            this.isOpen = false;
        } else {
            this._openChat();
        }
    }
    
    /**
     * Toggle voice input
     */
    _toggleVoiceInput() {
        if (!this.isListening) {
            // Start listening
            this._startVoiceRecognition();
        } else {
            // Stop listening
            this._stopVoiceRecognition();
        }
    }
    
    /**
     * Start voice recognition
     */
    _startVoiceRecognition() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();
            
            // Set language based on current selected language
            switch (this.currentLanguage) {
                case 'hi':
                    this.recognition.lang = 'hi-IN';
                    break;
                case 'ta':
                    this.recognition.lang = 'ta-IN';
                    break;
                default:
                    this.recognition.lang = 'en-IN';
            }
            
            this.recognition.continuous = false;
            this.recognition.interimResults = false;
            
            this.recognition.onstart = () => {
                this.isListening = true;
                this.voiceButton.classList.add('active');
                this.input.placeholder = 'ЁЯОд Listening...';
            };
            
            this.recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                this.input.value = transcript;
                
                // Process after a short delay
                setTimeout(() => {
                    this._handleUserInput();
                }, 500);
            };
            
            this.recognition.onerror = (event) => {
                console.error('Speech recognition error', event.error);
                this._stopVoiceRecognition();
            };
            
            this.recognition.onend = () => {
                this._stopVoiceRecognition();
            };
            
            this.recognition.start();
        } else {
            alert('Speech recognition is not supported in your browser.');
        }
    }
    
    /**
     * Stop voice recognition
     */
    _stopVoiceRecognition() {
        if (this.recognition) {
            this.recognition.stop();
        }
        
        this.isListening = false;
        this.voiceButton.classList.remove('active');
        this.input.placeholder = this.translations[this.currentLanguage].inputPlaceholder;
    }
    
    /**
     * Get current time formatted as HH:MM
     */
    _getCurrentTime() {
        const now = new Date();
        return now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    /**
     * Scroll chat to bottom
     */
    _scrollToBottom() {
        this.messages.scrollTop = this.messages.scrollHeight;
    }
}

// Initialize the chatbot when document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Only initialize if the container exists
    if (document.getElementById('krishibot-container')) {
        const chatbot = new KrishiConnectChatbot();
        chatbot.init();
    }
});